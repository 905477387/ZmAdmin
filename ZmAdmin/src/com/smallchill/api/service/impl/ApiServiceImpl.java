package com.smallchill.api.service.impl;

import com.smallchill.api.model.Order;
import com.smallchill.api.model.OrderStatus;
import com.smallchill.api.service.ApiService;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.modules.app.model.RechargeCard;
import org.springframework.stereotype.Service;

import java.util.Date;

/**
 * Generated by Blade.
 * 2017-10-18 16:49:02
 */
@Service
public class ApiServiceImpl implements ApiService {

    @Override
    public boolean createOrder(Order order) {
        RechargeCard rechargeCard = Blade.create(RechargeCard.class).findById(order.getCard_id());
        int num = rechargeCard.getCard_number() - order.getCharge_number();
        if (num >= 0) {
            order.setOrder_no("ZM" + System.nanoTime());
            rechargeCard.setCard_number(num);
            order.setStatus(1);
            order.setCreate_time(new Date());
            Blade.create(RechargeCard.class).update(rechargeCard);
            Blade.create(Order.class).saveAndSetKey(order);
            changeStatus(order.getId(), order.getStatus());
            return true;
        } else {
            throw new RuntimeException("库存不足,请稍后再试!");
        }
    }

    @Override
    public boolean chargeOrder(Integer id, String charger) {
        Blade blade = Blade.create(Order.class);
        Order order = blade.findById(id);
        if (order.getStatus() == 2) {
            blade.updateBy("charger = #{charger}, charge_time = now()", "id = #{id}", CMap.init().set("charger", charger).set("id", id));
            changeStatus(id, 3);
        } else {
            throw new RuntimeException("只有待核销的订单才可操作");
        }
        return true;
    }

    @Override
    public boolean changeStatus(Integer orderId, Integer status) {
        //更新主订单
        Blade.create(Order.class).updateBy("status = #{status}", "id = #{orderId}", CMap.init().set("status", status).set("orderId", orderId));
        //更新订单状态表
        OrderStatus orderStatus = new OrderStatus();
        orderStatus.setOrder_id(orderId);
        orderStatus.setOrder_status(status);
        orderStatus.setChange_time(new Date());
        Blade.create(OrderStatus.class).save(orderStatus);
        return true;
    }

}
