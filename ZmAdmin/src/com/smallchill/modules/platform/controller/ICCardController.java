package com.smallchill.modules.platform.controller;

import com.alibaba.fastjson.JSONArray;
import com.smallchill.common.base.BaseController;
import com.smallchill.common.tool.SysCache;
import com.smallchill.core.annotation.Json;
import com.smallchill.core.aop.AopContext;
import com.smallchill.core.constant.ConstShiro;
import com.smallchill.core.meta.PageIntercept;
import com.smallchill.core.shiro.ShiroKit;
import com.smallchill.core.toolbox.ApiResult;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.modules.charge.model.Charge;
import com.smallchill.modules.charge.model.ChargeList;
import com.smallchill.modules.platform.model.ICCard;
import com.smallchill.modules.platform.service.ICCardService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

/**
 * Generated by Blade.
 * 2017-09-09 15:42:39
 */
@Controller
@RequestMapping("/iccard")
public class ICCardController extends BaseController {
	private static String CODE = "iccard";
	private static String PREFIX = "tb_iccard";
	private static String LIST_SOURCE = "iccard.list";
	private static String BASE_PATH = "/modules/platform/iccard/";
	
	@Autowired
    ICCardService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "iccard.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "iccard_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable String id, ModelMap mm) {
		ICCard iCCard = service.findById(id);
		mm.put("model", JsonKit.toJson(iCCard));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "iccard_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable String id, ModelMap mm) {
		ICCard iCCard = service.findById(id);
		mm.put("model", JsonKit.toJson(iCCard));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "iccard_view.html";
	}

	@Json
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE, new PageIntercept(){
            @Override
            public void queryBefore(AopContext ac) {
                if (ShiroKit.hasRole(ConstShiro.COMPANY)) {
                    Map<String, Object> param = ac.getParam();
                    param.put("CustNo", ShiroKit.getUser().getDeptId());
                    ac.setCondition("and CardNo not in (SELECT CardNo from tb_charge_list where CustNo = #{CustNo} and (status = 1 or status = 3)) and CustNo = #{CustNo} and CardStatus = " + toStr(param.get("CardStatus"), "2"));
                }
                if (ShiroKit.hasRole(ConstShiro.STATION)) {
                    Map<String, Object> param = ac.getParam();
                    param.put("StationNo", ShiroKit.getUser().getDeptId());
                    ac.setCondition("and CardNo not in (SELECT CardNo from tb_charge_list where StationNo = #{StationNo} and (status = 1 or status = 3)) and StationNo = #{StationNo} and CardStatus = " + toStr(param.get("CardStatus"), "2"));
                }
            }
        });
		return grid;
	}

	@Json
	@RequestMapping(KEY_SAVE)
	public ApiResult save() {
		ICCard iCCard = mapping(PREFIX, ICCard.class);
		boolean temp = service.save(iCCard);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_UPDATE)
	public ApiResult update() {
		ICCard iCCard = mapping(PREFIX, ICCard.class);
		boolean temp = service.update(iCCard);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_REMOVE)
	public ApiResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}

    @RequestMapping("charge")
    public String charge(String ids, ModelMap mm) {
        List<ICCard> list = service.findBy("id in (#{join(ids)})", CMap.init().set("ids", toArray(ids)));
        mm.put("list", list);
        mm.put("CustNo", list.get(0).getCustNo());
        mm.put("CustName", list.get(0).getCustName());
        return BASE_PATH + "iccard_charge.html";
    }

    @Json
    @RequestMapping("pushCharge")
    public ApiResult pushCharge(Charge charge, String list) {
        charge.setBankName(SysCache.getBankName(charge.getBankNo()));
        List<ChargeList> chargeList = JSONArray.parseArray(list, ChargeList.class);
        service.saveCharge(charge, chargeList);
        return success("提交成功");
    }


}
