package com.smallchill.modules.platform.service.impl;

import com.smallchill.core.base.service.BaseService;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.plugins.dao.Md;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.Func;
import com.smallchill.core.toolbox.kit.StrKit;
import com.smallchill.core.toolbox.support.Convert;
import com.smallchill.modules.platform.model.Investor;
import com.smallchill.modules.platform.model.InvestorPercent;
import com.smallchill.modules.platform.model.Station;
import com.smallchill.modules.platform.service.InvestorService;
import org.springframework.stereotype.Service;

import java.util.Map;

/**
 * Generated by Blade.
 * 2017-09-26 18:12:48
 */
@Service
public class InvestorServiceImpl extends BaseService<Investor> implements InvestorService {

	@Override
	public boolean updateStatus(String ids, Integer status) {
		StringBuilder sb = new StringBuilder(" status = #{status} ");
		CMap map = CMap.init().set("status", status).set("ids", Convert.toIntArray(ids));
		boolean temp = updateBy(sb.toString(), "id in (#{join(ids)})", map);
		return temp;
	}

	@Override
	@SuppressWarnings("unchecked")
	public Map<String, Object> findOne(Object id) {
		return Md.selectOne("investor.findOne", CMap.init().set("id", id), Map.class);
	}

    @Override
    public boolean saveInvestor(Investor investor) {
        Station station = Blade.create(Station.class).findById(investor.getStationNo());
        investor.setStationAbbreviate(station.getStationAbbreviate());
        double percent = Convert.toDouble(Db.queryStr("SELECT (case when sum(InvestorPercent) is null then 0 else sum(InvestorPercent) end) sum FROM tb_investor WHERE StationNo = #{StationNo} AND IsDeleted = 0", station));
        if (investor.getInvestorPercent().doubleValue() + percent > 100) {
            throw new RuntimeException("投资比不能超过100%!");
        }
        saveAndSetKey(investor);
        InvestorPercent ip = new InvestorPercent();
        ip.setInvestorId(investor.getId());
        ip.setInvestorPercent(investor.getInvestorPercent());
        Blade.create(InvestorPercent.class).save(ip);
        return true;
    }

    @Override
    public boolean updateInvestor(Investor investor) {
        Investor i = Blade.create(Investor.class).findById(investor.getId());
        if (StrKit.isNotEmpty(investor.getStationNo())) {
            Station station = Blade.create(Station.class).findById(investor.getStationNo());
            investor.setStationAbbreviate(station.getStationAbbreviate());
            i.setStationNo(investor.getStationNo());
        }
        double percent = Convert.toDouble(Db.queryStr("SELECT (case when sum(InvestorPercent) is null then 0 else sum(InvestorPercent) end) sum FROM tb_investor WHERE StationNo = #{StationNo} and id <> #{id} AND IsDeleted = 0", i));
        if (!Func.isEmpty(investor.getInvestorPercent())) {
            if (investor.getInvestorPercent().doubleValue() + percent > 100) {
                throw new RuntimeException("投资比不能超过100%!");
            }
            if (investor.getInvestorPercent() != i.getInvestorPercent()) {
                InvestorPercent ip = new InvestorPercent();
                ip.setInvestorId(investor.getId());
                ip.setInvestorPercent(investor.getInvestorPercent());
                Blade.create(InvestorPercent.class).save(ip);
            }
        }
        return update(investor);
    }

}
