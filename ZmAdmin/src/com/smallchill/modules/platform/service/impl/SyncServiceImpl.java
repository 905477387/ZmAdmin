package com.smallchill.modules.platform.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.Func;
import com.smallchill.core.toolbox.kit.HttpKit;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.core.toolbox.kit.StrKit;
import com.smallchill.modules.platform.model.Custom;
import com.smallchill.modules.platform.model.ICCard;
import com.smallchill.modules.platform.model.OilTrade;
import com.smallchill.modules.platform.model.Station;
import com.smallchill.modules.platform.service.SyncService;
import com.smallchill.system.model.Dept;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * Generated by Blade.
 * 2017-09-09 15:42:39
 */
@Service
public class SyncServiceImpl implements SyncService {

    @Override
    public boolean saveSync() {

        //--------------------同步卡号-----------------------
        //saveCard();
        //--------------------------------------------------

        //--------------------同步公司站点--------------------
        String customLastOperateTime = Db.queryStr("select LastOperateTime from tb_custom order by LastOperateTime desc limit 1", null);
        JSONObject custom = getCust(customLastOperateTime);
        List<Custom> customList = JSONObject.parseArray(custom.get("CustList").toString(), Custom.class);
        List<String> custNos = customList.stream().filter(c -> StrKit.isNotEmpty(c.getCustNo())).map(c -> c.getCustNo()).collect(Collectors.toList());
        //先删除更新时间对于的老数据，然后批量入库
        Blade customDao = Blade.create(Custom.class);
        customDao.deleteBy("custNo in (#{join(custNos)})", CMap.init().set("custNos", custNos));
        customDao.saveBatch(customList);
        //--------------------------------------------------

        //--------------------同步站点和部门-----------------
        saveStationAndDept();
        //--------------------------------------------------

        //-----------------------同步消费--------------------
        //saveOil();
        //--------------------------------------------------

	    return true;
    }

    @Override
    public boolean saveSyncAll() {

        //--------------------同步卡号----------------------
        JSONObject card = getCard("");
        List<ICCard> cardList = JSONObject.parseArray(card.get("CardList").toString(), ICCard.class);
        Blade cardDao = Blade.create(ICCard.class);
        cardDao.deleteBy("delete from tb_iccard where 1=1");
        cardDao.saveBatch(cardList);
        //--------------------------------------------------

        //--------------------同步公司站点--------------------
        JSONObject custom = getCust("");
        List<Custom> customList = JSONObject.parseArray(custom.get("CustList").toString(), Custom.class);
        Blade customDao = Blade.create(Custom.class);
        customDao.deleteBy("delete from tb_custom where 1=1");
        customDao.saveBatch(customList);
        //--------------------------------------------------

        //-------------------同步站点和部门------------------
        saveStationAndDept();
        //--------------------------------------------------

        //-----------------------同步消费--------------------
        Blade oilDao = Blade.create(OilTrade.class);
        oilDao.deleteBy("delete from tb_oil_trade where 1=1");
        saveOil();
        //--------------------------------------------------

        return true;
    }

    @Override
    public boolean saveCard() {
        //--------------------同步卡号-----------------------
        /*String cardLastOperateTime = Db.queryStr("select LastOperateTime from tb_iccard order by LastOperateTime desc limit 1", null);
        JSONObject card = getCard(cardLastOperateTime);
        List<ICCard> cardList = JSONObject.parseArray(card.get("CardList").toString(), ICCard.class);
        List<String> cardNos = cardList.stream().filter(c -> StrKit.isNotEmpty(c.getCardNo())).map(c -> c.getCardNo()).collect(Collectors.toList());
        Blade cardDao = Blade.create(ICCard.class);//先删除更新时间对应的老数据，然后批量入库
        cardDao.deleteBy("CardNo in (#{join(cardNos)})", CMap.init().set("cardNos", cardNos));
        cardDao.saveBatch(cardList);*/
        //--------------------------------------------------


        JSONObject card = getCard("");
        List<ICCard> cardList = JSONObject.parseArray(card.get("CardList").toString(), ICCard.class);
        Blade cardDao = Blade.create(ICCard.class);
        cardDao.deleteBy("delete from tb_iccard where 1=1");
        cardDao.saveBatch(cardList);

        return true;
    }

    @Override
    public boolean saveOil() {
        //--------------------同步消费-----------------------
        String UploadTime = Db.queryStr("select UploadTime from tb_oil_trade order by UploadTime desc limit 1", null);
        JSONObject oil = getOil(UploadTime);
        List<OilTrade> oilList = JSONObject.parseArray(oil.get("TradeList").toString(), OilTrade.class);

        //找出上传时间和传入条件的时间相同的数据，然后删除再一次性插入(因为不同站点的flowno会重复，所以无法直接单主键删除)
        Blade oilDao = Blade.create(OilTrade.class);
        List<OilTrade> collect = oilList.stream().filter(oilTrade -> oilTrade.getUploadTime().equals(UploadTime)).collect(Collectors.toList());
        for (OilTrade o : collect) {
            oilDao.deleteBy("FlowNo = #{FlowNo} and StationNo = #{StationNo} and CardNo = #{CardNo}", o);
        }
        oilDao.saveBatch(oilList);
        //--------------------------------------------------
        return true;
    }

    @Override
    public boolean saveStationAndDept() {
        JSONObject custom = getCust("");

        //--------------------同步站点-----------------------
        List<Station> stationList = JSONObject.parseArray(custom.get("CustList").toString(), Station.class).stream().distinct().collect(Collectors.toList());
        Blade stationDao = Blade.create(Station.class);
        stationDao.deleteBy("delete from tb_station where 1=1");
        stationDao.saveBatch(stationList);
        //--------------------------------------------------

        //--------------------同步部门-----------------------
        List<Custom> deptCustomList = JSONObject.parseArray(custom.get("CustList").toString(), Custom.class).stream().distinct().collect(Collectors.toList());
        Blade deptDao = Blade.create(Dept.class);
        deptDao.deleteBy("delete from blade_dept where 1=1");
        List<Dept> deptList = new ArrayList<>();
        for (int i = 0; i < stationList.size(); i++) {
            Station s = stationList.get(i);
            Dept dept = new Dept();
            dept.setId(s.getId());
            dept.setNum(i);
            dept.setPid("0");
            dept.setSimplename(s.getStationAbbreviate());
            dept.setFullname(s.getStationAbbreviate());
            dept.setVersion(1);
            deptList.add(dept);
        }
        for (int i = 0; i < deptCustomList.size(); i++) {
            Custom c = deptCustomList.get(i);
            Dept dept = new Dept();
            dept.setId(c.getId());
            dept.setNum(i);
            dept.setPid(c.getStationNo());
            dept.setSimplename(c.getCustomerName());
            dept.setFullname(c.getCustomerName());
            dept.setVersion(1);
            deptList.add(dept);
        }
        deptDao.saveBatch(deptList);
        //--------------------------------------------------
        return true;
    }

    //获取用户接口参数
    public static JSONObject getCust(String LastOperateTime) {

        Map<String, Object> param = new HashMap<>();
        param.put("LastOperateTime", Func.toStr(LastOperateTime, ""));
        param.put("LastCustNo", "");
        param.put("Count", "10000");
        Map<String, Object> token = new HashMap<>();
        token.put("Version", "1.0");
        token.put("SystemType", 1001);
        token.put("StationNo", "00000000");
        token.put("OperatorName", "");
        token.put("OperatorNo", "");
        token.put("Auth_ID", "ZMNYJS");
        token.put("TokenStr", "3D97A6E5DAAACF3BC09BA117D8E5B702");
        param.put("Token", token);
        String ret = HttpKit.post("http://218.93.148.142:1085/Interface/GetICCustList.ashx", JsonKit.toJson(param));
        return JSONObject.parseObject(ret);
    }

    //获取IC卡参数
    public static JSONObject getCard(String LastOperateTime) {
        Map<String, Object> param = new HashMap<>();
        param.put("LastOperateTime", Func.toStr(LastOperateTime, ""));
        param.put("LastCardNo", "");
        param.put("Count", "10000");
        Map<String, Object> token = new HashMap<>();
        token.put("Version", "1.0");
        token.put("SystemType", 1001);
        token.put("StationNo", "00000000");
        token.put("OperatorNo", "");
        token.put("OperatorName", "");
        token.put("Auth_ID", "ZMNYJS");
        token.put("TokenStr", "3D97A6E5DAAACF3BC09BA117D8E5B702");
        param.put("Token", token);
        String ret = HttpKit.post("http://218.93.148.142:1085/Interface/GetICCardList.ashx", JsonKit.toJson(param));
        return JSONObject.parseObject(ret);
    }

    //同步消费记录
    public static JSONObject getOil(String LastUploadTime) {
        Map<String, Object> param = new HashMap<>();
        param.put("LastUploadTime", Func.toStr(LastUploadTime, ""));
        param.put("LastStationNo", "");
        param.put("LastFlowNo", 0);
        param.put("Count", "2000");
        Map<String, Object> token = new HashMap<>();
        token.put("Version", "1.0");
        token.put("SystemType", 1001);
        token.put("StationNo", "00000000");
        token.put("OperatorNo", "");
        token.put("OperatorName", "");
        token.put("Auth_ID", "ZMNYJS");
        token.put("TokenStr", "3D97A6E5DAAACF3BC09BA117D8E5B702");
        param.put("Token", token);
        String ret = HttpKit.post("http://218.93.148.142:1085/Interface/GetOilTradeList.ashx", JsonKit.toJson(param));
        return JSONObject.parseObject(ret);
    }

}
