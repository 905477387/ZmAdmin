package com.smallchill.modules.charge.controller;

import com.smallchill.common.base.BaseController;
import com.smallchill.core.annotation.Json;
import com.smallchill.core.toolbox.ApiResult;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.modules.charge.model.Bank;
import com.smallchill.modules.charge.service.BankService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Generated by Blade.
 * 2017-09-13 20:35:54
 */
@Controller
@RequestMapping("/bank")
public class BankController extends BaseController {
	private static String CODE = "bank";
	private static String PREFIX = "tb_bank";
	private static String LIST_SOURCE = "bank.list";
	private static String BASE_PATH = "/modules/charge/bank/";
	
	@Autowired
    BankService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "bank.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "bank_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable Integer id, ModelMap mm) {
		Bank bank = service.findById(id);
		mm.put("model", JsonKit.toJson(bank));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "bank_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable Integer id, ModelMap mm) {
		Bank bank = service.findById(id);
		mm.put("model", JsonKit.toJson(bank));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "bank_view.html";
	}

	@Json
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE);
		return grid;
	}

	@Json
	@RequestMapping(KEY_SAVE)
	public ApiResult save() {
		Bank bank = mapping(PREFIX, Bank.class);
		boolean temp = service.save(bank);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_UPDATE)
	public ApiResult update() {
		Bank bank = mapping(PREFIX, Bank.class);
		boolean temp = service.update(bank);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_REMOVE)
	public ApiResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
}
