package com.smallchill.modules.charge.controller;

import com.smallchill.common.base.BaseController;
import com.smallchill.common.tool.SysCache;
import com.smallchill.core.annotation.Json;
import com.smallchill.core.aop.AopContext;
import com.smallchill.core.constant.ConstShiro;
import com.smallchill.core.meta.PageIntercept;
import com.smallchill.core.plugins.dao.Blade;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.shiro.ShiroKit;
import com.smallchill.core.toolbox.ApiResult;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.grid.BladePage;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.modules.charge.model.Charge;
import com.smallchill.modules.charge.model.ChargeList;
import com.smallchill.modules.charge.service.ChargeService;
import com.smallchill.modules.platform.service.SyncService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

/**
 * Generated by Blade.
 * 2017-09-10 01:09:32
 */
@Controller
@RequestMapping("/charge")
public class ChargeController extends BaseController {
	private static String CODE = "charge";
	private static String PREFIX = "tb_charge";
	private static String LIST_SOURCE = "charge.list";
    private static String TRANS_LIST_SOURCE = "charge.transList";
	private static String BASE_PATH = "/modules/charge/charge/";
	
	@Autowired
    ChargeService service;

	@Autowired
    SyncService syncService;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "charge.html";
	}

    @RequestMapping("/trans")
    public String indexTrans(ModelMap mm) {
        mm.put("code", CODE);
        return BASE_PATH + "charge_trans.html";
    }

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "charge_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable Integer id, ModelMap mm) {
		Charge charge = service.findById(id);
		mm.put("model", JsonKit.toJson(charge));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "charge_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable Integer id, ModelMap mm) {
		Charge charge = service.findById(id);
		mm.put("model", JsonKit.toJson(charge));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "charge_view.html";
	}

	@Json
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE, new PageIntercept(){
            @Override
            public void queryBefore(AopContext ac) {
                Map<String, Object> param = ac.getParam();
                StringBuilder sb = new StringBuilder();

                if (param.get("year_skip_true") != null) {
                    sb.append(" and YEAR(CreateTime) = #{year_skip_true} ");
                }
                if (param.get("month_skip_true") != null) {
                    sb.append(" and MONTH(CreateTime) = #{month_skip_true} ");
                }

                if (ShiroKit.lacksRole(ConstShiro.ADMINISTRATOR) && ShiroKit.lacksRole(ConstShiro.FINANCE)) {
                    param.put("StationNo", ShiroKit.getUser().getDeptId());
                    sb.append(" and StationNo = #{StationNo} and (Status = 3 or Status = 4) ");
                }
                ac.setCondition(sb.toString());

            }

            @Override
            public void queryAfter(AopContext ac) {
                BladePage<Map<String, Object>> page = (BladePage<Map<String, Object>>) ac.getObject();
                List<Map<String, Object>> list = page.getRows();
                for (Map<String, Object> map : list) {
                    map.put("StatusName", SysCache.getDictName(905, map.get("Status")));
                }
            }
        });
		return grid;
	}

    @Json
    @RequestMapping("transList")
    public Object transList() {
        Object grid = paginate(TRANS_LIST_SOURCE, new PageIntercept(){
            @Override
            public void queryBefore(AopContext ac) {
                Map<String, Object> param = ac.getParam();
                StringBuilder sb = new StringBuilder();

                if (param.get("month_skip_true") != null) {
                    sb.append(" and MONTH(CreateTime) = #{month_skip_true} ");
                }
                if (param.get("year_skip_true") != null) {
                    sb.append(" and YEAR(CreateTime) = #{year_skip_true} ");
                }

                if (ShiroKit.lacksRole(ConstShiro.ADMINISTRATOR) && ShiroKit.lacksRole(ConstShiro.FINANCE)) {
                    param.put("StationNo", ShiroKit.getUser().getDeptId());
                    sb.append(" and StationNo = #{StationNo} and (Status = 3 or Status = 4) ");
                }
                ac.setCondition(sb.toString());

            }

            @Override
            public void queryAfter(AopContext ac) {
                BladePage<Map<String, Object>> page = (BladePage<Map<String, Object>>) ac.getObject();
                List<Map<String, Object>> list = page.getRows();
                for (Map<String, Object> map : list) {
                    map.put("StatusName", SysCache.getDictName(905, map.get("Status")));
                }
            }
        });
        return grid;
    }

	@Json
	@RequestMapping(KEY_SAVE)
	public ApiResult save() {
		Charge charge = mapping(PREFIX, Charge.class);
		boolean temp = service.save(charge);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping("audit")
	public ApiResult audit() {
		Charge charge = mapping(Charge.class);
		boolean temp = service.audit(charge);
		if (temp) {
            syncService.saveCard();
			return success("标记充值成功");
		} else {
			return error("审核失败");
		}
	}

    @Json
    @RequestMapping("cancel")
    public ApiResult cancel(@RequestParam String id, @RequestParam String OrderNo) {
        boolean temp = service.cancel(id, OrderNo);
        if (temp) {
            return success("取消订单成功");
        } else {
            return error("取消订单失败");
        }
    }

    @Json
    @RequestMapping("chargeSuccess")
    public ApiResult chargeSuccess(@RequestParam String CardNo, @RequestParam String OrderNo) {
        boolean temp = Blade.create(ChargeList.class).updateBy("Status = 4", "OrderNo = #{OrderNo} and CardNo = #{CardNo}", CMap.init().set("CardNo", CardNo).set("OrderNo", OrderNo));
        if (temp) {
            Integer cnt = Db.queryInt("SELECT count(1) FROM tb_charge_list WHERE OrderNo = #{OrderNo} AND `Status` <> 4", CMap.init().set("OrderNo", OrderNo));
            if (cnt == 0) {
                Blade.create(Charge.class).updateBy("Status = 4", "OrderNo = #{OrderNo}", CMap.init().set("OrderNo", OrderNo));
            }
            return success("圈存成功");
        } else {
            return error("圈存失败");
        }
    }

	@Json
	@RequestMapping(KEY_REMOVE)
	public ApiResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}

    @RequestMapping("charge")
    public String charge(String OrderNo, ModelMap mm) {
        //List<ChargeList> list = Blade.create(ChargeList.class).findBy("OrderNo = #{OrderNo}", CMap.init().set("OrderNo", OrderNo));
        List<Map> list = Db.selectList("SELECT cl.*,bd.name as StatusName FROM tb_charge_list cl LEFT JOIN (SELECT * FROM blade_dict WHERE `code` = 905) bd ON cl.Status = bd.num WHERE cl.OrderNo = #{OrderNo}", CMap.init().set("OrderNo", OrderNo));
        Charge charge = Blade.create(Charge.class).findFirstBy("OrderNo = #{OrderNo}", CMap.init().set("OrderNo", OrderNo));
        mm.put("list", list);
        mm.put("charge", charge);
        mm.put("statusName", SysCache.getDictName(905, charge.getStatus()));
        return BASE_PATH + "charge_view.html";
    }
}
