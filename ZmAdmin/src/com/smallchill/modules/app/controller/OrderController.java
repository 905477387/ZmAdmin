package com.smallchill.modules.app.controller;

import com.smallchill.api.model.Order;
import com.smallchill.common.base.BaseController;
import com.smallchill.core.annotation.Json;
import com.smallchill.core.aop.AopContext;
import com.smallchill.core.constant.ConstShiro;
import com.smallchill.core.meta.PageIntercept;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.shiro.ShiroKit;
import com.smallchill.core.toolbox.ApiResult;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.modules.app.service.OrderService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

/**
 * Generated by Blade.
 * 2018-01-07 12:18:34
 */
@Controller
@RequestMapping("/order")
public class OrderController extends BaseController {
	private static String CODE = "order";
	private static String PREFIX = "tb_order";
	private static String LIST_SOURCE = "order.list";
	private static String BASE_PATH = "/modules/app/order/";
	
	@Autowired
    OrderService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "order.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "order_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable Integer id, ModelMap mm) {
		Order order = service.findById(id);
		mm.put("model", JsonKit.toJson(order));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "order_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable Integer id, ModelMap mm) {
		Order order = service.findById(id);
        String card_name = Db.queryStr("select card_name from tb_recharge_card where id = #{card_id}", order);
        mm.put("model", JsonKit.toJson(CMap.parse(order).set("card_name", card_name)));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "order_view.html";
	}

	@Json
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE, new PageIntercept(){
            @Override
            public void queryBefore(AopContext ac) {
                if (ShiroKit.lacksRole(ConstShiro.ADMINISTRATOR)) {
                    ac.getParam().put("charger", ShiroKit.getUser().getId());
                    ac.setCondition("and charger = #{charger}");
                }
            }

            /*@Override
            public void queryAfter(AopContext ac) {
                BladePage<Map<String, Object>> page = (BladePage<Map<String, Object>>) ac.getObject();
                List<Map<String, Object>> list = page.getRows();
                list.forEach(map -> {
                    int charger = toInt(map.get("charger"), 0);
                    User user = SysCache.getUser(charger);
                    if (notEmpty(user)) {
                        map.put("charger_name", user.getName());
                        map.put("charger_station", SysCache.getDeptName(user.getDeptid()));
                    }
                });
            }*/
        });
		return grid;
	}

	@Json
	@RequestMapping(KEY_SAVE)
	public ApiResult save() {
		Order order = mapping(PREFIX, Order.class);
		boolean temp = service.save(order);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_UPDATE)
	public ApiResult update() {
		Order order = mapping(PREFIX, Order.class);
		boolean temp = service.update(order);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_REMOVE)
	public ApiResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
}
