package com.smallchill.modules.app.controller;

import com.smallchill.common.base.BaseController;
import com.smallchill.core.annotation.Json;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.ApiResult;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.modules.app.model.Proceeds;
import com.smallchill.modules.app.service.ProceedsService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.Map;

/**
 * Generated by Blade.
 * 2018-01-07 12:18:34
 */
@Controller
@RequestMapping("/proceeds")
public class ProceedsController extends BaseController {
	private static String CODE = "proceeds";
	private static String PREFIX = "tb_proceeds";
	private static String LIST_SOURCE = "proceeds.list";
	private static String BASE_PATH = "/modules/app/proceeds/";
	
	@Autowired
    ProceedsService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
        Map map = Db.selectOne("select * from tb_proceeds_default");
        mm.put("defaultProceed", map);
        mm.put("code", CODE);
		return BASE_PATH + "proceeds.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "proceeds_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable Integer id, ModelMap mm) {
		Proceeds proceeds = service.findById(id);
		mm.put("model", JsonKit.toJson(proceeds));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "proceeds_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable Integer id, ModelMap mm) {
		Proceeds proceeds = service.findById(id);
		mm.put("model", JsonKit.toJson(proceeds));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "proceeds_view.html";
	}

	@Json
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE);
		return grid;
	}

	@Json
	@RequestMapping(KEY_SAVE)
	public ApiResult save() {
		Proceeds proceeds = mapping(PREFIX, Proceeds.class);
        boolean flag = Db.isExist("select * from tb_proceeds where proceed_time = #{proceed_time}", proceeds);
		if (flag) {
		    return error("该日期收益已经设置,无法新增");
        }
		boolean temp = service.save(proceeds);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_UPDATE)
	public ApiResult update() {
		Proceeds proceeds = mapping(PREFIX, Proceeds.class);
		boolean temp = service.update(proceeds);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_REMOVE)
	public ApiResult remove(@RequestParam String ids) {
		int cnt = service.deleteByIds(ids);
		if (cnt > 0) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}

    @Json
    @RequestMapping("defaultProceed")
    public ApiResult defaultProceed(@RequestParam Integer id, @RequestParam String default_proceed_num) {
	    boolean temp;
	    if (isEmpty(id)) {
            temp = Db.save("tb_proceeds_default", "id", CMap.init().set("default_proceed_num",default_proceed_num)) > 0;
        } else {
            temp = Db.update("tb_proceeds_default", "id", CMap.init().set("default_proceed_num",default_proceed_num).set("id", id)) > 0;
        }
        if (temp) {
            return success("保存成功");
        } else {
            return error("保存失败");
        }
    }
}
