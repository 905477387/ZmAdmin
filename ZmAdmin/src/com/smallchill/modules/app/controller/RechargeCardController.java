package com.smallchill.modules.app.controller;

import com.smallchill.common.base.BaseController;
import com.smallchill.core.annotation.Json;
import com.smallchill.core.aop.AopContext;
import com.smallchill.core.constant.ConstConfig;
import com.smallchill.core.meta.PageIntercept;
import com.smallchill.core.plugins.dao.Db;
import com.smallchill.core.toolbox.ApiResult;
import com.smallchill.core.toolbox.CMap;
import com.smallchill.core.toolbox.grid.BladePage;
import com.smallchill.core.toolbox.kit.JsonKit;
import com.smallchill.modules.app.model.RechargeCard;
import com.smallchill.modules.app.service.RechargeCardService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import java.util.List;
import java.util.Map;

/**
 * Generated by Blade.
 * 2017-11-09 18:24:22
 */
@Controller
@RequestMapping("/rechargecard")
public class RechargeCardController extends BaseController {
	private static String CODE = "rechargecard";
	private static String PREFIX = "tb_recharge_card";
	private static String LIST_SOURCE = "rechargecard.list";
	private static String BASE_PATH = "/modules/app/rechargecard/";
	
	@Autowired
    RechargeCardService service;
	
	@RequestMapping(KEY_MAIN)
	public String index(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "rechargecard.html";
	}

	@RequestMapping(KEY_ADD)
	public String add(ModelMap mm) {
		mm.put("code", CODE);
		return BASE_PATH + "rechargecard_add.html";
	}

	@RequestMapping(KEY_EDIT + "/{id}")
	public String edit(@PathVariable Integer id, ModelMap mm) {
		RechargeCard rechargeCard = service.findById(id);
		mm.put("model", JsonKit.toJson(rechargeCard));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "rechargecard_edit.html";
	}

	@RequestMapping(KEY_VIEW + "/{id}")
	public String view(@PathVariable Integer id, ModelMap mm) {
		RechargeCard rechargeCard = service.findById(id);
		mm.put("model", JsonKit.toJson(rechargeCard));
		mm.put("id", id);
		mm.put("code", CODE);
		return BASE_PATH + "rechargecard_view.html";
	}

	@Json
	@RequestMapping(KEY_LIST)
	public Object list() {
		Object grid = paginate(LIST_SOURCE, new PageIntercept(){
            @Override
            public void queryAfter(AopContext ac) {
                BladePage<Map<String, Object>> page = (BladePage<Map<String, Object>>) ac.getObject();
                List<Map<String, Object>> list = page.getRows();
                for (Map<String, Object> map : list) {
                    Map<String, Object> img = Db.findById("BLADE_ATTACH", map.get("card_photo"));
                    String url = "";
                    if (null != img) {
                        url = ConstConfig.DOMAIN + img.get("URL");
                    }
                    map.put("photo", url);
                }
            }
        });
		return grid;
	}

	@Json
	@RequestMapping(KEY_SAVE)
	public ApiResult save() {
		RechargeCard rechargeCard = mapping(PREFIX, RechargeCard.class);
		boolean temp = service.save(rechargeCard);
		if (temp) {
			return success(SAVE_SUCCESS_MSG);
		} else {
			return error(SAVE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_UPDATE)
	public ApiResult update() {
		RechargeCard rechargeCard = mapping(PREFIX, RechargeCard.class);
		boolean temp = service.update(rechargeCard);
		if (temp) {
			return success(UPDATE_SUCCESS_MSG);
		} else {
			return error(UPDATE_FAIL_MSG);
		}
	}

	@Json
	@RequestMapping(KEY_REMOVE)
	public ApiResult remove(@RequestParam String ids) {
		boolean temp = service.updateBy("is_deleted = 1", "id in (#{join(ids)})", CMap.init().set("ids", toArray(ids)));
		if (temp) {
			return success(DEL_SUCCESS_MSG);
		} else {
			return error(DEL_FAIL_MSG);
		}
	}
}
